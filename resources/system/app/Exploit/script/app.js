(function() {
	'use strict';
	var model;
	var controller;
	var view;
	model = {
		exploits: [{
			title: 'Hapara',
			callback: function(instructions) {
				instructions[4].innerHTML += '<a href="Exploits/Hapara/background-d7574b7bdf62bf457103.js">this</a>.';
				instructions[5].innerHTML += '<a>this</a>';
				instructions[5].innerHTML += ', and then drag ';
				instructions[5].innerHTML += '<a>this</a>';
				instructions[5].innerHTML += ' to the top of that tab.';
			},
			instructions: [
				'This exploit allows you to hide tabs and completely control Hapara.',
				'1. Persistent Mode. This will Work semi-permanently, with the exception of factory resets and account resets',
				'2. Temporary Mode. This will only work until you log out or shut down your ChromeBook. You should be fine if you just close this lid, though.',
				'',
				'To Enable persistent mode, navigate to ~/Extensions/kbohafcopfpigkjdimdcdgenlhkmhbnc/2.x.x/webpack/background-d7574b7bdf62bf457103.js, and replace with ',
				'To Enable temporary mode, click '
			]
		}],
		init: function() {
			for (let i = 0, ii = this.exploits.length; i != ii; i++) {
				controller.newContent(this.exploits[i]);
			}
		}
	};
	controller = {
		init: function() {
			model.init();
			view.init();
		},
		newContent: function(options) {
			view.newContent(options);
		}
	};
	view = {
		init: function() {
		},
		newContent: function(params) {
			var exploitGroup = document.createElement('div');
			exploitGroup.className = 'exploitGroup';
			var exploitLabel = document.createElement('div');
			exploitLabel.className = 'exploitLabel';
			var dropDown = document.createElement('img');
			dropDown.className = 'dropdown';
			dropDown.src = 'res/drawable/dropdown.svg';
			exploitLabel.appendChild(dropDown);
			var title = document.createElement('div');
			title.className = 'title';
			title.innerText = params.title;
			exploitLabel.appendChild(title);
			exploitLabel.addEventListener('click', function() {
				if (exploitGroup.expanded) {
					/*Collapse group*/
					exploitGroup.expanded = false;
					exploitGroup.className = 'exploitGroup';
				} else {
					/*Expand group*/
					exploitGroup.expanded = true;
					exploitGroup.className = 'exploitGroup active';
				}
			}.bind(this));
			exploitGroup.appendChild(exploitLabel);
			var exploitBody = document.createElement('div');
			exploitBody.className = 'exploitBody';
			for (let i = 0, ii = params.instructions.length; i != ii; i++) {
				let instruction = document.createElement('p');
				instruction.className = 'instructions';
				instruction.innerText = params.instructions[i];
				exploitBody.appendChild(instruction);
			}
			exploitGroup.appendChild(exploitBody);
			exploitGroup.expanded = false;
			document.body.appendChild(exploitGroup);
			params.callback(exploitBody.children);
		}
	};
	controller.init();
})();